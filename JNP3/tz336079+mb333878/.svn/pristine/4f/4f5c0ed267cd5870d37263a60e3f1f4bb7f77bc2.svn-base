#include <cstdio>
#include "sejf.h"
#include "kontroler.h"

Sejf::Sejf(Sejf&& other) : _kontroler(other._kontroler)
{
    move(std::move(other));
}

short int Sejf::operator[](const int idx)
{
    if (_numOfAttempts == 0 && idx >= 0 && (size_t)idx <= _text.size())
        setAlert();

    if (idx < 0 || (size_t)idx >= _text.size() || _numOfAttempts == 0)
        return -1;

    _numOfAttempts--;
    return (short int)_text[idx];
}

Sejf& Sejf::operator+=(const int val)
{
    if (val > 0) {
        _numOfAttempts += val;
        setModified();
    }
    return *this;
}

Sejf& Sejf::operator*=(const int val)
{
    if (val > 0) {
        _numOfAttempts *= val;
        setModified();
    }
    return *this;
}

Sejf& Sejf::operator-=(const int val)
{
    if (val > 0 && _numOfAttempts >= val) {
        _numOfAttempts -= val;
        setModified();
    }
    return *this;
}

Sejf& Sejf::operator=(Sejf&& other)
{
    move(std::move(other));
    return *this;
}

const Kontroler& Sejf::kontroler() const
{
    return _kontroler;
}

void Sejf::move(Sejf&& other)
{
    _text = other._text;
    _numOfAttempts = other._numOfAttempts;
    _status = other._status;
    other._text = "";
    other._numOfAttempts = 0;
}

void Sejf::setAlert() const {
    _status = Status::ALERT;
}

void Sejf::setModified() const {
    if (_status != Status::ALERT)
        _status = Status::MODIFIED;
}
